import React from 'react';

const Table: React.FC = () => {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function generateTable(width: number, height: number) {
        const tbl = document.getElementsByTagName('table')[0];
        const tblBody = document.createElement('tbody');
        const tblcpt = tbl.createCaption();
        tblcpt.innerHTML = 'Nonogram No.1';

        let row = document.createElement('tr');
        let cell = document.createElement('td');
        cell.classList.add('topLeftCell');
        row.appendChild(cell);

        // eslint-disable-next-line no-plusplus
        for (let j = 0; j < width; j += 1) {
            cell = document.createElement('td');
            cell.classList.add('columndefinition');
            row.appendChild(cell);
        }

        tblBody.appendChild(row);
        // creating all cells
        for (let i = 0; i < height; i += 1) {
            // creates a table row
            row = document.createElement('tr');
            cell = document.createElement('td');
            cell.classList.add('rowdefinition');
            row.appendChild(cell);

            for (let j = 0; j < width; j += 1) {
                // Create a <td> element and a text node, make the text
                // node the contents of the <td>, and put the <td> at
                // the end of the table row
                cell = document.createElement('td');
                if (i % 5 === 0) {
                    cell.classList.add('row5');
                }
                if (j % 5 === 0) {
                    cell.classList.add('column5');
                }
                row.appendChild(cell);
            }

            // add the row to the end of the table body
            tblBody.appendChild(row);
        }

        // put the <tbody> in the <table>
        tbl.appendChild(tblBody);
        // appends <table> into <body>
        // body.appendChild(tbl);
        // sets the border attribute of tbl to 2;
        tbl.setAttribute('border', '2');

        return tbl;
    }

    return generateTable(20, 30);
};

export default Table;
























const Board: React.FC = () => {
    
    const tableGenerator = () => {
        const elements = [];
        const numofrows = 15;
        for (let i = 0; i < numofrows; i = +1) {
            elements.push(<tr key={i.toString()}>{rowGenerator()}</tr>);
        }
        return elements;
    };
    
    const rowGenerator = () => {
        const elements = [];
        const rowlength = 20;
        for (let i = 0; i < rowlength; i = +1) {
            elements.push(<td key={i.toString()}>0</td>);
        }
        return elements;
    };

    const tableGenerator = () => {
        return (
            <table>
                {columns.map(() => (
                    // eslint-disable-next-line react/jsx-key
                    <tr>{rowGenerator()}</tr>
                ))}
            </table>
        );
    };

    return tableGenerator();
};
